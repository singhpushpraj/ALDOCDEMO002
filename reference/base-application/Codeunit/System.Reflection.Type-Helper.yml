### YamlMime:BusinessCentralApplicationObject
fqName: System.Reflection."Type Helper"
alId: ID 10
namespace: System.Reflection
baseKind: Codeunit
kind: Codeunit
parent: N:Module::Base_Application::Namespace::System.Reflection
langs:
- al
seeAlso:
- '[Codeunit](https://learn.microsoft.com/dynamics365/business-central/dev-itpro/developer/devenv-codeunit-object)'
objectProperties:
- name: InherentEntitlements
  value: X
  promoted: false
- name: InherentPermissions
  value: X
  promoted: false
- name: Permissions
  value: tabledata "Field" = r
  promoted: false
methods:
- syntax:
    content: 'procedure Evaluate(var Variable: Variant, String: Text, Format: Text, CultureName: Text): Boolean'
    parameters:
    - id: Variable
      parameterType:
        name: Variant
        isExternal: true
    - id: String
      parameterType:
        name: Text
        isExternal: true
    - id: Format
      parameterType:
        name: Text
        isExternal: true
    - id: CultureName
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: Evaluate
  uid: M:Codeunit::System#Reflection#Type_Helper.Evaluate(Variant@,Text,Text,Text):Boolean
- syntax:
    content: 'procedure GetLocalizedMonthToInt(Month: Text): Integer'
    parameters:
    - id: Month
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetLocalizedMonthToInt
  uid: M:Codeunit::System#Reflection#Type_Helper.GetLocalizedMonthToInt(Text):Integer
- syntax:
    content: 'procedure CompareDateTime(DateTimeA: DateTime, DateTimeB: DateTime): Integer'
    parameters:
    - id: DateTimeA
      parameterType:
        name: DateTime
        isExternal: true
    - id: DateTimeB
      parameterType:
        name: DateTime
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: CompareDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.CompareDateTime(DateTime,DateTime):Integer
- syntax:
    content: 'procedure FormatDate(DateToFormat: Date, LanguageId: Integer): Text'
    parameters:
    - id: DateToFormat
      parameterType:
        name: Date
        isExternal: true
    - id: LanguageId
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatDate
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatDate(Date,Integer):Text
- syntax:
    content: 'procedure FormatDate(DateToFormat: Date, Format: Text, CultureName: Text): Text'
    parameters:
    - id: DateToFormat
      parameterType:
        name: Date
        isExternal: true
    - id: Format
      parameterType:
        name: Text
        isExternal: true
    - id: CultureName
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatDate
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatDate(Date,Text,Text):Text
- syntax:
    content: 'procedure FormatDateWithCurrentCulture(DateToFormat: Date): Text'
    parameters:
    - id: DateToFormat
      parameterType:
        name: Date
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatDateWithCurrentCulture
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatDateWithCurrentCulture(Date):Text
- syntax:
    content: 'procedure GetHMSFromTime(var Hour: Integer, var Minute: Integer, var Second: Integer, TimeSource: Time)'
    parameters:
    - id: Hour
      parameterType:
        name: Integer
        isExternal: true
    - id: Minute
      parameterType:
        name: Integer
        isExternal: true
    - id: Second
      parameterType:
        name: Integer
        isExternal: true
    - id: TimeSource
      parameterType:
        name: Time
        isExternal: true
  name: GetHMSFromTime
  uid: M:Codeunit::System#Reflection#Type_Helper.GetHMSFromTime(Integer@,Integer@,Integer@,Time)
- syntax:
    content: 'procedure IsLeapYear(Date: Date): Boolean'
    parameters:
    - id: Date
      parameterType:
        name: Date
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: IsLeapYear
  uid: M:Codeunit::System#Reflection#Type_Helper.IsLeapYear(Date):Boolean
- syntax:
    content: 'procedure LanguageIDToCultureName(LanguageID: Integer): Text'
    parameters:
    - id: LanguageID
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: LanguageIDToCultureName
  uid: M:Codeunit::System#Reflection#Type_Helper.LanguageIDToCultureName(Integer):Text
- syntax:
    content: 'procedure GetCultureName(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetCultureName
  uid: M:Codeunit::System#Reflection#Type_Helper.GetCultureName:Text
- syntax:
    content: 'procedure GetOptionNo(Value: Text, OptionString: Text): Integer'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    - id: OptionString
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetOptionNo
  uid: M:Codeunit::System#Reflection#Type_Helper.GetOptionNo(Text,Text):Integer
- syntax:
    content: 'procedure GetOptionNoFromTableField(Value: Text, TableNo: Integer, FieldNo: Integer): Integer'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    - id: TableNo
      parameterType:
        name: Integer
        isExternal: true
    - id: FieldNo
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetOptionNoFromTableField
  uid: M:Codeunit::System#Reflection#Type_Helper.GetOptionNoFromTableField(Text,Integer,Integer):Integer
- syntax:
    content: 'procedure GetNumberOfOptions(OptionString: Text): Integer'
    parameters:
    - id: OptionString
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetNumberOfOptions
  uid: M:Codeunit::System#Reflection#Type_Helper.GetNumberOfOptions(Text):Integer
- syntax:
    content: 'procedure OptionsAreEqual(Value: Text, CurrentOption: Text): Boolean'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    - id: CurrentOption
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: OptionsAreEqual
  uid: M:Codeunit::System#Reflection#Type_Helper.OptionsAreEqual(Text,Text):Boolean
- syntax:
    content: 'procedure IsNumeric(Text: Text): Boolean'
    parameters:
    - id: Text
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: IsNumeric
  uid: M:Codeunit::System#Reflection#Type_Helper.IsNumeric(Text):Boolean
- syntax:
    content: 'procedure GetField(TableNo: Integer, FieldNo: Integer, Field: __MissingTypeSymbol__): Boolean'
    parameters:
    - id: TableNo
      parameterType:
        name: Integer
        isExternal: true
    - id: FieldNo
      parameterType:
        name: Integer
        isExternal: true
    - id: Field
      parameterType:
        name: __MissingTypeSymbol__
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: GetField
  uid: M:Codeunit::System#Reflection#Type_Helper.GetField(Integer,Integer,__MissingSymbol__@):Boolean
- syntax:
    content: 'procedure GetFieldLength(TableNo: Integer, FieldNo: Integer): Integer'
    parameters:
    - id: TableNo
      parameterType:
        name: Integer
        isExternal: true
    - id: FieldNo
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetFieldLength
  uid: M:Codeunit::System#Reflection#Type_Helper.GetFieldLength(Integer,Integer):Integer
- syntax:
    content: 'procedure TestFieldIsNotObsolete(Field: __MissingTypeSymbol__)'
    parameters:
    - id: Field
      parameterType:
        name: __MissingTypeSymbol__
        isExternal: true
  name: TestFieldIsNotObsolete
  uid: M:Codeunit::System#Reflection#Type_Helper.TestFieldIsNotObsolete(__MissingSymbol__)
- syntax:
    content: 'procedure IsPhoneNumber(Input: Text): Boolean'
    parameters:
    - id: Input
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: IsPhoneNumber
  uid: M:Codeunit::System#Reflection#Type_Helper.IsPhoneNumber(Text):Boolean
- syntax:
    content: 'procedure GetUserTimezoneOffset(var Duration: Duration): Boolean'
    parameters:
    - id: Duration
      parameterType:
        name: Duration
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: GetUserTimezoneOffset
  uid: M:Codeunit::System#Reflection#Type_Helper.GetUserTimezoneOffset(Duration@):Boolean
- syntax:
    content: 'procedure GetUserClientTypeOffset(var Duration: Duration)'
    parameters:
    - id: Duration
      parameterType:
        name: Duration
        isExternal: true
  name: GetUserClientTypeOffset
  uid: M:Codeunit::System#Reflection#Type_Helper.GetUserClientTypeOffset(Duration@)
- syntax:
    content: 'procedure GetTimezoneOffset(var Duration: Duration, TimeZoneID: Text)'
    parameters:
    - id: Duration
      parameterType:
        name: Duration
        isExternal: true
    - id: TimeZoneID
      parameterType:
        name: Text
        isExternal: true
  name: GetTimezoneOffset
  uid: M:Codeunit::System#Reflection#Type_Helper.GetTimezoneOffset(Duration@,Text)
- syntax:
    content: 'procedure EvaluateUnixTimestamp(Timestamp: BigInteger): DateTime'
    parameters:
    - id: Timestamp
      parameterType:
        name: BigInteger
        isExternal: true
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: EvaluateUnixTimestamp
  uid: M:Codeunit::System#Reflection#Type_Helper.EvaluateUnixTimestamp(BigInteger):DateTime
- syntax:
    content: 'procedure EvaluateUTCDateTime(DateTimeText: Text): DateTime'
    parameters:
    - id: DateTimeText
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: EvaluateUTCDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.EvaluateUTCDateTime(Text):DateTime
- syntax:
    content: 'procedure FormatDateTime(FormattingDateTime: DateTime, Format: Text, CultureName: Text): Text'
    parameters:
    - id: FormattingDateTime
      parameterType:
        name: DateTime
        isExternal: true
    - id: Format
      parameterType:
        name: Text
        isExternal: true
    - id: CultureName
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatDateTime(DateTime,Text,Text):Text
- syntax:
    content: 'procedure FormatUtcDateTime(DateTime: DateTime, DataFormat: Text, DataFormattingCulture: Text): Text'
    parameters:
    - id: DateTime
      parameterType:
        name: DateTime
        isExternal: true
    - id: DataFormat
      parameterType:
        name: Text
        isExternal: true
    - id: DataFormattingCulture
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatUtcDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatUtcDateTime(DateTime,Text,Text):Text
- syntax:
    content: 'procedure GetCurrUTCDateTime(): DateTime'
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: GetCurrUTCDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.GetCurrUTCDateTime:DateTime
- syntax:
    content: 'procedure GetCurrUTCDateTimeAsText(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetCurrUTCDateTimeAsText
  uid: M:Codeunit::System#Reflection#Type_Helper.GetCurrUTCDateTimeAsText:Text
- syntax:
    content: 'procedure GetCurrUTCDateTimeISO8601(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetCurrUTCDateTimeISO8601
  uid: M:Codeunit::System#Reflection#Type_Helper.GetCurrUTCDateTimeISO8601:Text
- syntax:
    content: 'procedure AddHoursToDateTime(SourceDateTime: DateTime, NoOfHours: Integer): DateTime'
    parameters:
    - id: SourceDateTime
      parameterType:
        name: DateTime
        isExternal: true
    - id: NoOfHours
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: AddHoursToDateTime
  uid: M:Codeunit::System#Reflection#Type_Helper.AddHoursToDateTime(DateTime,Integer):DateTime
- syntax:
    content: 'procedure FormatDecimal(Decimal: Decimal, DataFormat: Text, DataFormattingCulture: Text): Text'
    parameters:
    - id: Decimal
      parameterType:
        name: Decimal
        isExternal: true
    - id: DataFormat
      parameterType:
        name: Text
        isExternal: true
    - id: DataFormattingCulture
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: FormatDecimal
  uid: M:Codeunit::System#Reflection#Type_Helper.FormatDecimal(Decimal,Text,Text):Text
- syntax:
    content: 'procedure UrlEncode(var Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: UrlEncode
  uid: M:Codeunit::System#Reflection#Type_Helper.UrlEncode(Text@):Text
- syntax:
    content: 'procedure UrlDecode(var Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: UrlDecode
  uid: M:Codeunit::System#Reflection#Type_Helper.UrlDecode(Text@):Text
- syntax:
    content: 'procedure HtmlEncode(var Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: HtmlEncode
  uid: M:Codeunit::System#Reflection#Type_Helper.HtmlEncode(Text@):Text
- syntax:
    content: 'procedure HtmlDecode(var Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: HtmlDecode
  uid: M:Codeunit::System#Reflection#Type_Helper.HtmlDecode(Text@):Text
- syntax:
    content: 'procedure UriEscapeDataString(Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: UriEscapeDataString
  uid: M:Codeunit::System#Reflection#Type_Helper.UriEscapeDataString(Text):Text
- syntax:
    content: 'procedure UriGetAuthority(Value: Text): Text'
    parameters:
    - id: Value
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: UriGetAuthority
  uid: M:Codeunit::System#Reflection#Type_Helper.UriGetAuthority(Text):Text
- syntax:
    content: 'procedure GetKeyAsString(RecordVariant: Variant, KeyIndex: Integer): Text'
    parameters:
    - id: RecordVariant
      parameterType:
        name: Variant
        isExternal: true
    - id: KeyIndex
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetKeyAsString
  uid: M:Codeunit::System#Reflection#Type_Helper.GetKeyAsString(Variant,Integer):Text
- syntax:
    content: 'procedure ReadAsTextWithSeparator(InStream: InStream, LineSeparator: Text): Text'
    parameters:
    - id: InStream
      parameterType:
        name: InStream
        isExternal: true
    - id: LineSeparator
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: ReadAsTextWithSeparator
  uid: M:Codeunit::System#Reflection#Type_Helper.ReadAsTextWithSeparator(InStream,Text):Text
- syntax:
    signatures:
    - '[TryFunction]'
    content: 'procedure TryReadAsTextWithSeparator(InStream: InStream, LineSeparator: Text, var Content: Text): Boolean'
    parameters:
    - id: InStream
      parameterType:
        name: InStream
        isExternal: true
    - id: LineSeparator
      parameterType:
        name: Text
        isExternal: true
    - id: Content
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: TryReadAsTextWithSeparator
  uid: M:Codeunit::System#Reflection#Type_Helper.TryReadAsTextWithSeparator(InStream,Text,Text@):Boolean
- syntax:
    content: 'procedure TryReadAsTextWithSepAndFieldErrMsg(InStream: InStream, LineSeparator: Text, FieldCaption: Text): Text'
    parameters:
    - id: InStream
      parameterType:
        name: InStream
        isExternal: true
    - id: LineSeparator
      parameterType:
        name: Text
        isExternal: true
    - id: FieldCaption
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: TryReadAsTextWithSepAndFieldErrMsg
  uid: M:Codeunit::System#Reflection#Type_Helper.TryReadAsTextWithSepAndFieldErrMsg(InStream,Text,Text):Text
- syntax:
    content: 'procedure CRLFSeparator(): Text[2]'
    return:
      returnType:
        name: Text[2]
        isExternal: true
  name: CRLFSeparator
  uid: M:Codeunit::System#Reflection#Type_Helper.CRLFSeparator:Text[2]
- syntax:
    content: 'procedure LFSeparator(): Text[1]'
    return:
      returnType:
        name: Text[1]
        isExternal: true
  name: LFSeparator
  uid: M:Codeunit::System#Reflection#Type_Helper.LFSeparator:Text[1]
- syntax:
    content: 'procedure SortRecordRef(var RecRef: RecordRef, CommaSeparatedFieldsToSort: Text, Ascending: Boolean)'
    parameters:
    - id: RecRef
      parameterType:
        name: RecordRef
        isExternal: true
    - id: CommaSeparatedFieldsToSort
      parameterType:
        name: Text
        isExternal: true
    - id: Ascending
      parameterType:
        name: Boolean
        isExternal: true
  name: SortRecordRef
  uid: M:Codeunit::System#Reflection#Type_Helper.SortRecordRef(RecordRef@,Text,Boolean)
- syntax:
    content: 'procedure TextDistance(Text1: Text, Text2: Text): Integer'
    parameters:
    - id: Text1
      parameterType:
        name: Text
        isExternal: true
    - id: Text2
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: TextDistance
  uid: M:Codeunit::System#Reflection#Type_Helper.TextDistance(Text,Text):Integer
- syntax:
    content: 'procedure NewLine(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: NewLine
  uid: M:Codeunit::System#Reflection#Type_Helper.NewLine:Text
- syntax:
    content: 'procedure GetMaxNumberOfParametersInSQLQuery(): Integer'
    return:
      returnType:
        name: Integer
        isExternal: true
  name: GetMaxNumberOfParametersInSQLQuery
  uid: M:Codeunit::System#Reflection#Type_Helper.GetMaxNumberOfParametersInSQLQuery:Integer
- syntax:
    content: 'procedure BitwiseAnd(A: Integer, B: Integer): Integer'
    parameters:
    - id: A
      parameterType:
        name: Integer
        isExternal: true
    - id: B
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: BitwiseAnd
  uid: M:Codeunit::System#Reflection#Type_Helper.BitwiseAnd(Integer,Integer):Integer
- syntax:
    content: 'procedure BitwiseOr(A: Integer, B: Integer): Integer'
    parameters:
    - id: A
      parameterType:
        name: Integer
        isExternal: true
    - id: B
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: BitwiseOr
  uid: M:Codeunit::System#Reflection#Type_Helper.BitwiseOr(Integer,Integer):Integer
- syntax:
    content: 'procedure BitwiseXor(A: Integer, B: Integer): Integer'
    parameters:
    - id: A
      parameterType:
        name: Integer
        isExternal: true
    - id: B
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Integer
        isExternal: true
  name: BitwiseXor
  uid: M:Codeunit::System#Reflection#Type_Helper.BitwiseXor(Integer,Integer):Integer
- syntax:
    content: 'procedure GetFormattedCurrentDateTimeInUserTimeZone(StringFormat: Text): Text'
    parameters:
    - id: StringFormat
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetFormattedCurrentDateTimeInUserTimeZone
  uid: M:Codeunit::System#Reflection#Type_Helper.GetFormattedCurrentDateTimeInUserTimeZone(Text):Text
- syntax:
    content: 'procedure GetCurrentDateTimeInUserTimeZone(): DateTime'
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: GetCurrentDateTimeInUserTimeZone
  uid: M:Codeunit::System#Reflection#Type_Helper.GetCurrentDateTimeInUserTimeZone:DateTime
- syntax:
    content: 'procedure ConvertDateTimeFromUTCToTimeZone(InputDateTime: DateTime, TimeZoneTxt: Text): DateTime'
    parameters:
    - id: InputDateTime
      parameterType:
        name: DateTime
        isExternal: true
    - id: TimeZoneTxt
      parameterType:
        name: Text
        isExternal: true
    return:
      returnType:
        name: DateTime
        isExternal: true
  name: ConvertDateTimeFromUTCToTimeZone
  uid: M:Codeunit::System#Reflection#Type_Helper.ConvertDateTimeFromUTCToTimeZone(DateTime,Text):DateTime
- syntax:
    content: 'procedure IntToHex(IntValue: Integer): Text'
    parameters:
    - id: IntValue
      parameterType:
        name: Integer
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: IntToHex
  uid: M:Codeunit::System#Reflection#Type_Helper.IntToHex(Integer):Text
- syntax:
    content: 'procedure Maximum(Value1: Decimal, Value2: Decimal): Decimal'
    parameters:
    - id: Value1
      parameterType:
        name: Decimal
        isExternal: true
    - id: Value2
      parameterType:
        name: Decimal
        isExternal: true
    return:
      returnType:
        name: Decimal
        isExternal: true
  name: Maximum
  uid: M:Codeunit::System#Reflection#Type_Helper.Maximum(Decimal,Decimal):Decimal
- syntax:
    content: 'procedure Minimum(Value1: Decimal, Value2: Decimal): Decimal'
    parameters:
    - id: Value1
      parameterType:
        name: Decimal
        isExternal: true
    - id: Value2
      parameterType:
        name: Decimal
        isExternal: true
    return:
      returnType:
        name: Decimal
        isExternal: true
  name: Minimum
  uid: M:Codeunit::System#Reflection#Type_Helper.Minimum(Decimal,Decimal):Decimal
- syntax:
    content: 'procedure TransferFieldsWithValidate(var TempFieldBuffer: Record "Field Buffer" temporary, RecordVariant: Variant, var TargetTableRecRef: RecordRef)'
    parameters:
    - id: TempFieldBuffer
      parameterType:
        name: Record "Field Buffer" temporary
        isExternal: true
    - id: RecordVariant
      parameterType:
        name: Variant
        isExternal: true
    - id: TargetTableRecRef
      parameterType:
        name: RecordRef
        isExternal: true
  name: TransferFieldsWithValidate
  uid: M:Codeunit::System#Reflection#Type_Helper.TransferFieldsWithValidate(Field_Buffer@,Variant,RecordRef@)
- syntax:
    content: 'procedure CalculateLog(Number: Decimal): Decimal'
    parameters:
    - id: Number
      parameterType:
        name: Decimal
        isExternal: true
    return:
      returnType:
        name: Decimal
        isExternal: true
  name: CalculateLog
  uid: M:Codeunit::System#Reflection#Type_Helper.CalculateLog(Decimal):Decimal
- syntax:
    content: 'procedure GetAmountFormatLCYWithUserLocale(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetAmountFormatLCYWithUserLocale
  uid: M:Codeunit::System#Reflection#Type_Helper.GetAmountFormatLCYWithUserLocale:Text
- syntax:
    content: 'procedure GetAmountFormatWithUserLocale(CurrencySymbol: Text[10]): Text'
    parameters:
    - id: CurrencySymbol
      parameterType:
        name: Text[10]
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetAmountFormatWithUserLocale
  uid: M:Codeunit::System#Reflection#Type_Helper.GetAmountFormatWithUserLocale(Text[10]):Text
- syntax:
    content: 'procedure GetAmountFormat(LocaleId: Integer, CurrencySymbol: Text[10]): Text'
    parameters:
    - id: LocaleId
      parameterType:
        name: Integer
        isExternal: true
    - id: CurrencySymbol
      parameterType:
        name: Text[10]
        isExternal: true
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetAmountFormat
  uid: M:Codeunit::System#Reflection#Type_Helper.GetAmountFormat(Integer,Text[10]):Text
- syntax:
    content: 'procedure GetXMLAmountFormatWithTwoDecimalPlaces(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetXMLAmountFormatWithTwoDecimalPlaces
  uid: M:Codeunit::System#Reflection#Type_Helper.GetXMLAmountFormatWithTwoDecimalPlaces:Text
- syntax:
    content: 'procedure GetXMLDateFormat(): Text'
    return:
      returnType:
        name: Text
        isExternal: true
  name: GetXMLDateFormat
  uid: M:Codeunit::System#Reflection#Type_Helper.GetXMLDateFormat:Text
- syntax:
    content: 'procedure CopyRecVariantToRecRef(RecordVariant: Variant, var RecRef: RecordRef)'
    parameters:
    - id: RecordVariant
      parameterType:
        name: Variant
        isExternal: true
    - id: RecRef
      parameterType:
        name: RecordRef
        isExternal: true
  name: CopyRecVariantToRecRef
  uid: M:Codeunit::System#Reflection#Type_Helper.CopyRecVariantToRecRef(Variant,RecordRef@)
- syntax:
    content: 'procedure IsDigit(ch: Char): Boolean'
    parameters:
    - id: ch
      parameterType:
        name: Char
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: IsDigit
  uid: M:Codeunit::System#Reflection#Type_Helper.IsDigit(Char):Boolean
- syntax:
    content: 'procedure IsUpper(ch: Char): Boolean'
    parameters:
    - id: ch
      parameterType:
        name: Char
        isExternal: true
    return:
      returnType:
        name: Boolean
        isExternal: true
  name: IsUpper
  uid: M:Codeunit::System#Reflection#Type_Helper.IsUpper(Char):Boolean
commentId: O:Codeunit::System#Reflection#Type Helper
name: '"Type Helper"'
uid: O:Codeunit::System#Reflection#Type_Helper
